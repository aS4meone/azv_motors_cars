import re
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Tuple

from app.core.config import POLYGON_COORDS
from app.notifications import send_telegram_message
from app.models.car_model import Vehicle

# –ö—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
alert_cache: Dict[str, datetime] = {}


def parse_numeric(value: str) -> float:
    if not value:
        return 0.0
    m = re.search(r"[-+]?\d*\.?\d+", value.replace(",", "."))
    return float(m.group()) if m else 0.0


def parse_int(value: str) -> int:
    return int(parse_numeric(value))


def extract_from_items(items: List[Dict], key_name: str) -> str:
    for item in items:
        if item.get("name", "").lower() == key_name.lower():
            return item.get("value", "").strip()
    return ""


def is_point_inside_polygon(lat: float, lon: float, polygon: List[Tuple[float, float]]) -> bool:
    inside = False
    x, y = lon, lat
    j = len(polygon) - 1
    for i in range(len(polygon)):
        xi, yi = polygon[i]
        xj, yj = polygon[j]
        if ((yi > y) != (yj > y)) and (x < (xj - xi) * (y - yi) / (yj - yi) + xi):
            inside = not inside
        j = i
    return inside


def clean_cache():
    now = datetime.utcnow()
    to_del = [k for k, t in alert_cache.items() if now - t > timedelta(minutes=5)]
    for k in to_del:
        del alert_cache[k]


def should_alert(imei: str, alert_type: str) -> bool:
    clean_cache()
    key = f"{imei}:{alert_type}"
    if key in alert_cache:
        return False
    alert_cache[key] = datetime.utcnow()
    return True


async def process_vehicle_notifications(data: Dict, vehicle: Vehicle):
    imei = vehicle.vehicle_imei
    name = vehicle.name
    alerts: List[str] = []

    def maybe(cond: bool, atype: str, msg: str):
        if cond and should_alert(imei, atype):
            alerts.append(msg)

    # –ú–∞–ø–ø–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è accel-–¥–∞—Ç—á–∏–∫–æ–≤
    sensor_map = {
        "Accel_SH1": "—Å–ª–∞–±—ã–π —É–¥–∞—Ä",
        "Accel_SH2": "—Å–∏–ª—å–Ω—ã–π —É–¥–∞—Ä",
        "Accel_SH3": "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
        "Accel_SH4": "–Ω–∞–∫–ª–æ–Ω",
    }

    pkg = data.get("PackageItems", [])
    regs = data.get("RegistredSensors", [])
    unregs = data.get("UnregisteredSensors", [])

    # ‚Äî –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑ PackageItems ‚Äî
    raw_speed = extract_from_items(pkg, "–°–∫–æ—Ä–æ—Å—Ç—å")
    speed = parse_numeric(raw_speed)
    maybe(speed >= 100, "overspeed", f"{name}: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed} –∫–º/—á")

    # ‚Äî –û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ RegisteredSensors ‚Äî
    raw_rpm = extract_from_items(regs, "–û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è (CAN-—à–∏–Ω–∞[3])")
    rpm = parse_int(raw_rpm)
    maybe(rpm >= 4000, "rpm_high", f"{name}: –í—ã—Å–æ–∫–∏–µ –æ–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è {rpm}")

    # ‚Äî –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ RegisteredSensors ‚Äî
    raw_temp = extract_from_items(regs, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è (CAN-—à–∏–Ω–∞[4])")
    temp = parse_numeric(raw_temp)
    maybe(temp >= 100, "temp_high", f"{name}: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è {temp}¬∞C")

    # ‚Äî –ö–∞–ø–æ—Ç –∏–∑ RegisteredSensors ‚Äî
    raw_hood = extract_from_items(regs, "–ö–∞–ø–æ—Ç (–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–π[0])")
    hood_open = raw_hood.lower() == "–æ—Ç–∫—Ä—ã—Ç"
    maybe(hood_open, "hood_open", f"{name}: –ö–∞–ø–æ—Ç –æ—Ç–∫—Ä—ã—Ç")

    # ‚Äî Accel_SH1‚Äì4 –∏ Accel_WAKEUP ‚Äî
    for item in unregs:
        raw_val = item.get("value", "")
        val_lower = raw_val.lower()
        # –∏—â–µ–º 'true' –∏ –∏–º—è –¥–∞—Ç—á–∏–∫–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
        if val_lower.startswith("true") and "(" in raw_val and ")" in raw_val:
            m = re.search(r"\(([^)]+)\)", raw_val)
            if not m:
                continue
            sensor = m.group(1)  # e.g. "Accel_SH2"
            if sensor in sensor_map:
                desc = sensor_map[sensor]
                maybe(True,
                      sensor.lower(),
                      f"{name}: {sensor} ({desc})")

    # ‚Äî –í—ã—Ö–æ–¥ –∑–∞ –∑–æ–Ω—É –ø–æ GPS ‚Äî
    lat = parse_numeric(extract_from_items(pkg, "–®–∏—Ä–æ—Ç–∞"))
    lon = parse_numeric(extract_from_items(pkg, "–î–æ–ª–≥–æ—Ç–∞"))
    if lat and lon and not is_point_inside_polygon(lat, lon, POLYGON_COORDS):
        maybe(True, "zone_exit", f"{name}: –í—ã—Ö–æ–¥ –∑–∞ –∑–æ–Ω—É ({lat}, {lon})")

    # ‚Äî –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç—ã ‚Äî
    if alerts:
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        header = f"üöó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {name}:"
        text = header + "\n" + "\n".join(alerts) + f"\n\n{ts}"
        await send_telegram_message(text)
