import socket
import asyncio
import httpx

TG_BOT_TOKEN = 'your_telegram_token'
TG_CHAT_ID = 'your_chat_id'
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage'

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
devices = {}

async def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    async with httpx.AsyncClient() as client:
        await client.post(TELEGRAM_API_URL, json={'chat_id': TG_CHAT_ID, 'text': message})

async def handle_data(client_socket, addr):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    device_ip, device_port = addr
    while True:
        try:
            data = await asyncio.get_running_loop().run_in_executor(None, client_socket.recv, 1024)
            if not data:
                break

            message = data.decode(errors='ignore').strip()
            await send_to_telegram(f'üì° –î–∞–Ω–Ω—ã–µ –æ—Ç {device_ip}:{device_port}: {message}')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if message.startswith('@NTC') and 'S:' in message:
                imei = message.split('S:')[-1].strip()
                devices[imei] = client_socket
                await send_to_telegram(f'‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {imei} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!')

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                client_socket.sendall(b'@NTC OK\r\n')
                await send_to_telegram(f'üì§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @NTC OK')

        except Exception as e:
            await send_to_telegram(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}')
            break

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for imei, sock in list(devices.items()):
        if sock == client_socket:
            del devices[imei]
            await send_to_telegram(f'‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {imei} –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å!')
            break
    client_socket.close()

async def send_to_device(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
    try:
        imei = '866011056063951'
        client_socket = devices.get(imei)

        if not client_socket:
            await send_to_telegram(f'‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {imei} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ')
            return

        client_socket.sendall(f'{message}\r\n'.encode())
        await send_to_telegram(f'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}')

    except Exception as e:
        await send_to_telegram(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}')

async def start_server():
    """–ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 12345))
    server_socket.listen(5)
    print('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω...')

    loop = asyncio.get_running_loop()
    while True:
        client_socket, addr = await loop.run_in_executor(None, server_socket.accept)
        print(f'–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {addr}')
        asyncio.create_task(handle_data(client_socket, addr))

if __name__ == '__main__':
    asyncio.run(start_server())
