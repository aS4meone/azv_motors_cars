import socket
import httpx
import asyncio

TG_BOT_TOKEN = '7649836420:AAHJkjRAlMOe2NWqK_UIkYXlFBx07BCFXlY'
TG_CHAT_ID = '965048905'
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage'
TELEGRAM_UPDATES_URL = f'https://api.telegram.org/bot{TG_BOT_TOKEN}/getUpdates'

SERVER_HOST = '0.0.0.0'
SERVER_PORT = 12345

# –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
commands_queue = asyncio.Queue()


async def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    async with httpx.AsyncClient() as client:
        await client.post(TELEGRAM_API_URL, json={'chat_id': TG_CHAT_ID, 'text': message})


async def handle_device(client_socket, addr):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    await send_to_telegram(f'üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {addr}')

    while True:
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            raw_data = await asyncio.get_running_loop().run_in_executor(None, client_socket.recv, 1024)
            if not raw_data:
                break  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å

            data = raw_data.decode('utf-8', errors='ignore').strip()
            await send_to_telegram(f'üì° –î–∞–Ω–Ω—ã–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {data}')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥–∏
            while not commands_queue.empty():
                command = await commands_queue.get()
                client_socket.sendall(command.encode())
                await send_to_telegram(f'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {command}')

        except Exception as e:
            await send_to_telegram(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            break

    await send_to_telegram(f'üö´ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å: {addr}')
    client_socket.close()


async def start_server():
    """–ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_HOST, SERVER_PORT))
    server_socket.listen(5)
    print('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...')

    loop = asyncio.get_running_loop()
    while True:
        client_socket, addr = await loop.run_in_executor(None, server_socket.accept)
        asyncio.create_task(handle_device(client_socket, addr))  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ


async def listen_telegram():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    last_update_id = None
    async with httpx.AsyncClient() as client:
        while True:
            try:
                params = {'offset': last_update_id + 1} if last_update_id else {}
                response = await client.get(TELEGRAM_UPDATES_URL, params=params)
                updates = response.json()

                for update in updates.get("result", []):
                    last_update_id = update["update_id"]
                    message = update.get("message", {}).get("text", "").strip()

                    if message:
                        await send_to_telegram(f'üì• –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {message}')
                        await commands_queue.put(message)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

            await asyncio.sleep(3)


async def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–ª—É—à–∞—Ç–µ–ª—è Telegram"""
    await asyncio.gather(start_server(), listen_telegram())


if __name__ == '__main__':
    asyncio.run(main())
