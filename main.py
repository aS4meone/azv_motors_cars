import socket
import httpx
import asyncio
import re

TG_BOT_TOKEN = '7649836420:AAHJkjRAlMOe2NWqK_UIkYXlFBx07BCFXlY'
TG_CHAT_ID = '965048905'
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage'
TELEGRAM_UPDATES_URL = f'https://api.telegram.org/bot{TG_BOT_TOKEN}/getUpdates'

SERVER_HOST = '0.0.0.0'
SERVER_PORT = 12345

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è IP –∏ –ø–æ—Ä—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏—Ö IMEI
devices = {}


async def send_to_telegram(message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    async with httpx.AsyncClient() as client:
        await client.post(TELEGRAM_API_URL, json={'chat_id': TG_CHAT_ID, 'text': message})


async def send_to_device(imei: str, message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –µ–≥–æ IMEI"""
    device_info = devices.get(imei)
    if not device_info:
        await send_to_telegram(f'‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å IMEI {imei} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    device_ip, device_port = device_info
    try:
        with socket.create_connection((device_ip, device_port), timeout=5) as sock:
            sock.sendall(message.encode())
            response = sock.recv(1024).decode(errors='ignore')
            await send_to_telegram(f'üì° –û—Ç–≤–µ—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {imei}: {response.strip()}')
    except Exception as e:
        await send_to_telegram(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {imei}: {e}')


async def start_server() -> None:
    """–ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_HOST, SERVER_PORT))
    server_socket.listen(5)
    print('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...')

    loop = asyncio.get_running_loop()
    while True:
        client_socket, addr = await loop.run_in_executor(None, server_socket.accept)
        print(f'–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {addr}')

        raw_data = await loop.run_in_executor(None, client_socket.recv, 1024)
        try:
            data = raw_data.decode('utf-8', errors='ignore').strip()
            if data.startswith('@NTC'):
                match = re.search(r'NE\*>S:(\d+)', data)
                if match:
                    imei = match.group(1)
                    devices[imei] = addr  # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP –∏ –ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –µ–≥–æ IMEI
                    await send_to_telegram(f'‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {imei} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!')
                    ack_message = '@NTC OK'
                    client_socket.sendall(ack_message.encode())
                    await send_to_telegram(f'üì§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ack_message}')
                else:
                    await send_to_telegram(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IMEI –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}')
            else:
                await send_to_telegram(f'üì° –î–∞–Ω–Ω—ã–µ –æ—Ç {addr}: {data}')
        except UnicodeDecodeError:
            await send_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {raw_data}")

        client_socket.close()


async def listen_telegram() -> None:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    last_update_id = None
    async with httpx.AsyncClient() as client:
        while True:
            try:
                params = {'offset': last_update_id + 1} if last_update_id else {}
                response = await client.get(TELEGRAM_UPDATES_URL, params=params)
                updates = response.json()

                for update in updates.get("result", []):
                    last_update_id = update["update_id"]
                    message = update.get("message", {}).get("text", "").strip()

                    if message:
                        # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "IMEI: –∫–æ–º–∞–Ω–¥–∞"
                        if ':' in message:
                            imei, command = map(str.strip, message.split(':', 1))
                            await send_to_telegram(f'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {imei}: {command}')
                            await send_to_device(imei, command)
                        else:
                            await send_to_telegram('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "IMEI: –∫–æ–º–∞–Ω–¥–∞".')

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

            await asyncio.sleep(3)


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–ª—É—à–∞—Ç–µ–ª—è Telegram"""
    await asyncio.gather(start_server(), listen_telegram())


if __name__ == '__main__':
    asyncio.run(main())
